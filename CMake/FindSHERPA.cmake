#TODO: Clean this up to use the Sherpa CMake interface when available
find_library(SHERPA_LIBRARY NAMES SherpaMain HINTS $ENV{SHERPA_ROOT_DIR}/lib/SHERPA-MC ${SHERPA_ROOT_DIR}/lib/SHERPA-MC)
IF(${SHERPA_LIBRARY} MATCHES "SHERPA_LIBRARY-NOTFOUND")
  FIND_PROGRAM(SHERPA_CONFIG_EXECUTABLE NAMES Sherpa-config
    HINTS $ENV{SHERPA_ROOT_DIR}/bin ${SHERPA_ROOT_DIR}/bin)
  IF(${SHERPA_CONFIG_EXECUTABLE} MATCHES "SHERPA_CONFIG_EXECUTABLE-NOTFOUND")
    MESSAGE(STATUS "Looking for SHERPA... Sherpa-config executable not found")
  ELSE(${SHERPA_CONFIG_EXECUTABLE} MATCHES "SHERPA_CONFIG_EXECUTABLE-NOTFOUND")
    MESSAGE(STATUS "Looking for SHERPA... using Sherpa-config executable")
    EXEC_PROGRAM(${SHERPA_CONFIG_EXECUTABLE} ARGS "--prefix" OUTPUT_VARIABLE SHERPA_PREFIX)
    find_library(SHERPA_LIBRARY NAMES sherpa_v1 PATHS ${SHERPA_PREFIX}/lib)
  ENDIF(${SHERPA_CONFIG_EXECUTABLE} MATCHES "SHERPA_CONFIG_EXECUTABLE-NOTFOUND")
ENDIF(${SHERPA_LIBRARY} MATCHES "SHERPA_LIBRARY-NOTFOUND")

find_library(TOOLSPHYS_LIBRARY NAMES ToolsPhys HINTS $ENV{SHERPA_ROOT_DIR}/lib/SHERPA-MC ${SHERPA_ROOT_DIR}/lib/SHERPA-MC)
find_library(TOOLSORG_LIBRARY NAMES ToolsOrg HINTS $ENV{SHERPA_ROOT_DIR}/lib/SHERPA-MC ${SHERPA_ROOT_DIR}/lib/SHERPA-MC)
find_library(METOOLS_LIBRARY NAMES METoolsMain HINTS $ENV{SHERPA_ROOT_DIR}/lib/SHERPA-MC ${SHERPA_ROOT_DIR}/lib/SHERPA-MC)
find_library(MODELMAIN_LIBRARY NAMES ModelMain HINTS $ENV{SHERPA_ROOT_DIR}/lib/SHERPA-MC ${SHERPA_ROOT_DIR}/lib/SHERPA-MC)
find_library(PHASICPROCESS_LIBRARY NAMES PhasicProcess HINTS $ENV{SHERPA_ROOT_DIR}/lib/SHERPA-MC ${SHERPA_ROOT_DIR}/lib/SHERPA-MC)
find_library(PHASICSELECTORS_LIBRARY NAMES PhasicSelectors HINTS $ENV{SHERPA_ROOT_DIR}/lib/SHERPA-MC ${SHERPA_ROOT_DIR}/lib/SHERPA-MC)
find_library(PHASICCHANNELS_LIBRARY NAMES PhasicChannels HINTS $ENV{SHERPA_ROOT_DIR}/lib/SHERPA-MC ${SHERPA_ROOT_DIR}/lib/SHERPA-MC)
find_library(COMIX_LIBRARY NAMES Comix HINTS $ENV{SHERPA_ROOT_DIR}/lib/SHERPA-MC ${SHERPA_ROOT_DIR}/lib/SHERPA-MC)
find_library(PHASIC_LIBRARY NAMES PhasicMain HINTS $ENV{SHERPA_ROOT_DIR}/lib/SHERPA-MC ${SHERPA_ROOT_DIR}/lib/SHERPA-MC)
find_library(SHERPA_SINGLE_EVENTS NAMES SherpaSingleEvents HINTS $ENV{SHERPA_ROOT_DIR}/lib/SHERPA-MC ${SHERPA_ROOT_DIR}/lib/SHERPA-MC)


find_path(SHERPA_INCLUDE_DIR SHERPA/Main/Sherpa.H
  HINTS $ENV{SHERPA_ROOT_DIR}/include/SHERPA-MC ${SHERPA_ROOT_DIR}/include/SHERPA-MC ${SHERPA_PREFIX}/include/SHERPA-MC)

mark_as_advanced(SHERPA_LIBRARY SHERPA_INCLUDE_DIR)

# handle QUIETLY and REQUIRED arguments and set sherpa_FOUND to TRUE if
# all listed variables are TRUE
include(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(SHERPA DEFAULT_MSG SHERPA_INCLUDE_DIR SHERPA_LIBRARY)

set(SHERPA_LIBRARIES ${SHERPA_LIBRARY} ${TOOLSPHYS_LIBRARY} ${TOOLSORG_LIBRARY} ${METOOLS_LIBRARY} ${MODELMAIN_LIBRARY} ${PHASICPROCESS_LIBRARY} ${PHASICSELECTORS_LIBRARY} ${PHASICCHANNELS_LIBRARY} ${COMIX_LIBRARY} ${PHASIC_LIBRARY} ${SHERPA_SINGLE_EVENTS})
get_filename_component(SHERPA_LIBRARY_DIRS ${SHERPA_LIBRARY} PATH)

set(SHERPA_INCLUDE_DIRS ${SHERPA_INCLUDE_DIR})

mark_as_advanced(SHERPA_FOUND)

name: CMake Build Matrix

on:
  workflow_call:
    inputs:
      matrix:
        type: string
        required: true
        description: 'JSON string of matrix configurations'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  CMAKE_VERSION: 3.21.1
  BUILD_TYPE: Release
  CCACHE_VERSION: 4.4
  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm_modules

jobs:
  build:
    strategy:
      matrix: ${{ fromJson(inputs.matrix) }}

    name: Build on ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies (Ubuntu)
      if: ${{ matrix.os != 'macos-13' && matrix.os != 'macos-14' }}
      run: sudo apt update && sudo apt install -y libhdf5-dev lcov libeigen3-dev ${{ matrix.cc }} cmake && pip install codecov

    - name: Install dependencies (MacOS)
      if: ${{ matrix.os == 'macos-13' || matrix.os == 'macos-14' }}
      run: |
        export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
        brew update
        brew install hdf5
        brew install eigen
        brew install ${{ matrix.fort }}

    - name: Set up cache
      id: cache-cpm
      uses: actions/cache@v4
      with:
        path: ~/cpm-cache
        key: ${{ matrix.name }}-cpm-${{ hashFiles('**/') }}
        restore-keys: |
          ${{ matrix.name }}-cpm-

    - name: ccache 
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        create-symlink: True
        key: ${{ matrix.name }}-ccache-${{ github.sha }}
        restore-keys: |
          ${{ matrix.name }}-ccache-

    - name: Configure CMake
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DACHILLES_ENABLE_TESTING=ON  \
          -DACHILLES_COVERAGE=${{ matrix.coverage }} -DCPM_SOURCE_CACHE=~/cpm-cache \
          -DACHILLES_ENABLE_SHERPA=OFF -DCMAKE_C_COMPILER=${{ matrix.cc }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx}} \
          -DCMAKE_Fortran_COMPILER=${{ matrix.fort }}

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }} -j4

    # Upload artifacts to be used in other workflows
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}-${{ matrix.compiler }}
        path: ${{ github.workspace }}/build

  test:
    needs: build
    strategy:
      matrix: ${{ fromJson(inputs.matrix) }}

    name: Test ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - uses: actions/download-artifact@v4
      with:
        name: build-${{ matrix.os }}-${{ matrix.compiler }}
        path: build

    - name: Test C++
      working-directory: ${{ github.workspace }}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./test/achilles-testsuite

    - name: Test Fotran
      working-directory: ${{ github.workspace }}/build
      run: ./test/achilles-fortran-testsuite
     
    - name: Code coverage
      if: ${{ matrix.coverage }}
      uses: codecov/codecov-action@v4
      with:
        files: ./build/coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  cross_section_check:
    needs: test
    strategy:
      matrix: ${{ fromJson(inputs.matrix) }}

    name: Test ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - uses: actions/download-artifact@v4
      with:
        name: build-${{ matrix.os }}-${{ matrix.compiler }}
        path: build
    
    - name: Run cross section checks
      working-directory: ${{ github.workspace }}/build
      run: |
          for file in examples/*.yml; do
            ./bin/achilles $file
          done

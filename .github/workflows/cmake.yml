name: CMake Build Matrix

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  CMAKE_VERSION: 3.21.1
  BUILD_TYPE: Release
  CCACHE_VERSION: 4.4

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    # TODO: Get build matrix working
    # name: ${{ matrix.config.name }}
    # runs-on: ${{ matrix.config.os }}
    # strategy:
    #   matrix:
    #     config:
    #       - {
    #           name: "Ubuntu Latest GCC", artifact: "Linux.tar.bz2",
    #           os: ubuntu-latest,
    #           cc: "gcc", cxx: "g++"
    #         }
    #       - {
    #           name: "macOS Latest Clang", artifact: "macOS.tar.bz2",
    #           os: macos-latest,
    #           cc: "clang", cxx: "clang++"
    #         }

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: sudo apt update && sudo apt install -y libhdf5-dev gfortran lcov && sudo pip install codecov

    - name: Set up cache
      id: cache-cpm
      uses: actions/cache@v2
      with:
        path: ~/cpm-cache
        key: ${{ runner.os }}-cpm-${{ hashFiles('**/') }}
        restore-keys: |
          ${{ runner.os }}-cpm-

    - name: Download ccache 
      id: ccache 
      shell: cmake -P {0}
      run: |
        set(ccache_url "https://github.com/cristianadam/ccache/releases/download/v$ENV{CCACHE_VERSION}/${ { runner.os } }.tar.xz")
        file(DOWNLOAD "${ccache_url}" ./ccache.tar.xz SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ccache.tar.xz)

    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("::set-output name=timestamp::${current_date}")

    - name: ccache cache files 
      uses: actions/cache@v2
      with:
        path: .ccache
        key: ${{ matrix.config.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
          ${{ matrix.config.name }}-ccache-

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DENABLE_TESTING=ON -DCOVERAGE=ON -DCPM_SOURCE_CACHE=~/cpm-cache -DENABLE_BSM=OFF -DENABLE_HEPMC3=OFF

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j4

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./test/achilles-testsuite
     
    - name: Code coverage
      working-directory: ${{github.workspace}}
      run: |
        lcov --directory . --capture --output-file coverage.info
        lcov --remove coverage.info '/Library/*' '/usr/*' "${HOME}"'/.cache/*' '*/test/*' '*/external/*' '*/_deps/*' '*/gzstream/*' '*/SHERPA-MC/*' --output-file coverage.info
        lcov --list coverage.info
        bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
